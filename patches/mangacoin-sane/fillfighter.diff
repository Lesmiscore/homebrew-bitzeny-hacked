diff --git a/src/consensus/tx_verify.cpp b/src/consensus/tx_verify.cpp
index 439e41fd1..9edecc3be 100755
--- a/src/consensus/tx_verify.cpp
+++ b/src/consensus/tx_verify.cpp
@@ -14,9 +14,12 @@
 #include "coins.h"
 #include "utilmoneystr.h"
 
-#include "util.h"
+#include <algorithm>
+#include <univalue.h>
+#include <core_io.h>
+#include <util.h>
+#include <numeric>
 
- 
 bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)
 {
     if (tx.nLockTime == 0)
@@ -159,7 +162,7 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i
     return nSigOps;
 }
 
-bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)
+bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs, bool fCheckSpam)
 {
     // Basic checks that don't depend on any context
     if (tx.vin.empty())
@@ -172,8 +175,19 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe
 
     // Check for negative or overflow output values
     CAmount nValueOut = 0;
+    int tx_count = 0;
+    std::vector<CScript> out_addresses;
+    std::vector<CAmount> out_amounts;
+
     for (const auto& txout : tx.vout)
     {
+        if (fCheckSpam) {
+            auto it = std::find(out_addresses.begin(), out_addresses.end(), txout.scriptPubKey);
+            if (it != out_addresses.end()) {
+              return state.DoS(0, false, REJECT_INVALID, "bad-txns-vout-duplicate");
+            }
+        }
+        out_addresses.push_back(txout.scriptPubKey);
         if (txout.nValue < 0)
             return state.DoS(100, false, REJECT_INVALID, "bad-txns-vout-negative");
         if (txout.nValue > MAX_MONEY)
@@ -181,6 +195,25 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe
         nValueOut += txout.nValue;
         if (!MoneyRange(nValueOut))
             return state.DoS(100, false, REJECT_INVALID, "bad-txns-txouttotal-toolarge");
+        out_amounts.push_back(txout.nValue);
+        tx_count++;
+        if (fCheckSpam) {
+            if (tx_count > 200) {
+              return state.DoS(100, false, REJECT_INVALID, "bad-txns-txout-toomany");
+            }
+        }
+    }
+
+    if (fCheckSpam) {
+      if (tx_count>=5) {
+        // sort
+        std::sort(out_amounts.begin(), out_amounts.end());
+        // remove biggest output
+        CAmount average = std::accumulate(out_amounts.begin(), out_amounts.end()-1, (CAmount)0) / (tx_count-1);
+        if (average < (0.1 * COIN)) {
+          return state.DoS(0, false, REJECT_INVALID, "bad-txns-vout-toosmall");
+        }
+      }
     }
 
     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock
diff --git a/src/consensus/tx_verify.h b/src/consensus/tx_verify.h
index d46d3294c..5e7ad4067 100644
--- a/src/consensus/tx_verify.h
+++ b/src/consensus/tx_verify.h
@@ -16,7 +16,7 @@ class CValidationState;
 /** Transaction validation functions */
 
 /** Context-independent validity checks */
-bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);
+bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true, bool fCheckSpam=false);
 
 namespace Consensus {
 /**
diff --git a/src/validation.cpp b/src/validation.cpp
index 495267773..771435344 100644
--- a/src/validation.cpp
+++ b/src/validation.cpp
@@ -470,7 +470,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool
     if (pfMissingInputs)
         *pfMissingInputs = false;
 
-    if (!CheckTransaction(tx, state))
+    if (!CheckTransaction(tx, state, true, true))
         return false; // state filled in by CheckTransaction
 
     // Coinbase is only valid in a block, not as a loose transaction
